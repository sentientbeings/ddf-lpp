DIM Price(7), Quantity(7), order(7)DIM CBundle(7), BestBundle(7)  'Current bundle of goods, best bundle of goodsDIM Wealth(7), Qty!(7), LowQty(7), DelPrice(7)DIM TestBundle(100, 7)   'Trial bundles''Next is fake stuff for testingTrue = (1 = 1): False = NOT TrueNGoods = 4: QCutOff = .9Price(1) = 40: Price(2) = 35: Price(3) = 25: Price(4) = 20Wealth = 500'CLS : Tries = 0: SlowBetter = 0: MediumBetter = 0FOR Wealth = 300 TO 600 STEP 45 FOR Pr = 5 TO 30 STEP 5   Price(1) = 40: Price(2) = 35: Price(3) = 25: Price(4) = Pr   QCutOff = .7   GOSUB MaxUtility: SlowUtility = BestUtility   GOSUB FastMaxUtility: FastUtility = BestUtility   GOSUB MediumMaxUtility: MediumUtility = BestUtility   PRINT "Wealth"; Wealth, "Slow="; SlowUtility, "Medium="; MediumUtility, "Fast="; FastUtility, Pr   IF SlowUtility > MediumUtility THEN PRINT "SlowBest": SlowBetter = SlowBetter + 1   IF MediumUtility > FastUtility THEN PRINT "MediumBetter": MediumBetter = MediumBetter + 1   Tries = Tries + 1 NEXT PrNEXT WealthPRINT "Tries"; Tries, "SlowBest"; SlowBetter, "MediumBetter"; MediumBetterEND'FastMaxUtility:   Wealth(1) = Wealth   FOR ggood = 1 TO NGoods:      Wealth(1) = Wealth(1) + Price(ggood):   'Calculate full wealth   NEXT ggood   BestUtility = 1   Good = 1   DO UNTIL (Good = NGoods) OR (Wealth(Good) < Price(Good))      Qty! = Wealth(Good) / ((NGoods + 1 - Good) * Price(Good))      IF Qty! < 1 THEN         CBundle(Good) = 1      ELSE         LowQty = FIX(Qty!)         IF Qty! - LowQty < .5 THEN            CBundle(Good) = LowQty         ELSE            CBundle(Good) = LowQty + 1         END IF      END IF      Wealth(Good + 1) = Wealth(Good) - CBundle(Good) * Price(Good)      BestBundle(Good) = CBundle(Good) - 1      BestUtility = BestUtility * CBundle(Good)      Good = Good + 1   LOOP   CBundle(Good) = FIX(Wealth(Good) / Price(Good))   BestBundle(Good) = CBundle(Good) - 1   BestUtility = BestUtility * CBundle(Good)   FOR Good = 1 TO NGoods:      Quantity(Good) = BestBundle(order(Good)):   NEXT GoodRETURN'MediumMaxUtility:   TuneFlag = False   GOSUB MaxUtil   MediumUtility = BestUtilityRETURN''MaxUtility:   FOR Good = 1 TO NGoods: order(Good) = Good: NEXT Good'   GOSUB Sortit 'Sort Price, Order and Quantity in descending order by Price'SlowMaxUtil:   TuneFlag = False   FOR ggood = 1 TO NGoods - 1      DelPrice(ggood) = Price(ggood) - Price(ggood + 1)      IF DelPrice < Price(NGoods) THEN TuneFlag = True   NEXT ggoodMaxUtil:   GOSUB Good1   LastTrial = Trial - 1   GOSUB TestBundles   Expenditure = 0   FOR Good = 1 TO NGoods      BestBundle(Good) = BestBundle(Good) - 1      Expenditure = Expenditure + BestBundle(Good) * Price(Good)   NEXT Good   FOR Good = 1 TO NGoods:  'Restoring original order of goods      Quantity(Good) = BestBundle(order(Good)):   NEXT GoodRETURN'Good1:   Wealth(1) = Wealth   FOR ggood = 1 TO NGoods:      Wealth(1) = Wealth(1) + Price(ggood):   'Calculate full wealth   NEXT ggood   BestUtility = 1: Trial = 0 '   Good = 1:   Qty!(1) = Wealth(1) / (NGoods * Price(1))   IF 1 < NGoods THEN      IF Qty!(1) < 1 THEN         CBundle(1) = 1: GOSUB Good2      ELSE         LowQty(1) = FIX(Qty!(1))         IF Qty!(1) - LowQty(1) < QCutOff THEN            CBundle(1) = LowQty(1)            Wealth(2) = Wealth(1) - LowQty(1) * Price(1)            GOSUB Good2         END IF         IF 1 + LowQty(1) - Qty!(1) < QCutOff THEN            Wealth(2) = Wealth(1) - (LowQty(1) + 1) * Price(1)            IF Wealth(2) >= Price(2) THEN CBundle(1) = LowQty(1) + 1: GOSUB Good2         END IF      END IF   ELSE      GOSUB LastGood   END IFRETURN'Good2:Good = 2:Qty!(2) = Wealth(2) / ((NGoods - 1) * Price(2))IF 2 < NGoods THEN   IF Qty!(2) < 1 THEN      CBundle(2) = 1: GOSUB Good3   ELSE      LowQty(2) = FIX(Qty!(2))      IF Qty!(2) - LowQty(2) < QCutOff THEN         CBundle(2) = LowQty(2)         Wealth(3) = Wealth(2) - LowQty(2) * Price(2)         GOSUB Good3      END IF      IF 1 + LowQty(2) - Qty!(2) < QCutOff THEN         Wealth(3) = Wealth(2) - (LowQty(2) + 1) * Price(2)         IF Wealth(3) >= Price(3) THEN CBundle(2) = LowQty(2) + 1: GOSUB Good3      END IF   END IFELSE   GOSUB LastGoodEND IFRETURN'Good3:Good = 3:Qty!(3) = Wealth(3) / ((NGoods - 2) * Price(3))IF 3 < NGoods THEN   IF Qty!(3) < 1 THEN      CBundle(3) = 1: GOSUB good4   ELSE      LowQty(3) = FIX(Qty!(3))      IF Qty!(3) - LowQty(3) < QCutOff THEN         CBundle(3) = LowQty(3)         Wealth(4) = Wealth(3) - LowQty(3) * Price(3)         GOSUB good4      END IF      IF 1 + LowQty(3) - Qty!(3) < QCutOff THEN         Wealth(4) = Wealth(3) - (LowQty(3) + 1) * Price(3)         IF Wealth(4) >= Price(4) THEN CBundle(3) = LowQty(3) + 1: GOSUB good4      END IF   END IFELSE   GOSUB LastGoodEND IFRETURN'good4:Good = 4:Qty!(4) = Wealth(4) / ((NGoods - 3) * Price(4))IF 4 < NGoods THEN   IF Qty!(4) < 1 THEN      CBundle(4) = 1: GOSUB Good5   ELSE      LowQty(4) = FIX(Qty!(4))      IF Qty!(4) - LowQty(4) < QCutOff THEN         CBundle(4) = LowQty(4)         Wealth(4 + 1) = Wealth(4) - LowQty(4) * Price(4)         GOSUB Good5      END IF      IF 1 + LowQty(4) - Qty!(4) < QCutOff THEN         Wealth(5) = Wealth(4) - (LowQty(4) + 1) * Price(4)         IF Wealth(5) >= Price(5) THEN CBundle(4) = LowQty(4) + 1: GOSUB Good5      END IF   END IFELSE   GOSUB LastGoodEND IFRETURN'Good5:Good = 5:Qty!(5) = Wealth(5) / ((NGoods - 4) * Price(5))IF 5 < NGoods THEN   IF Qty!(5) < 1 THEN      CBundle(5) = 1: Good = 6: GOSUB LastGood   ELSE      LowQty(5) = FIX(Qty!(5))      IF Qty!(5) - LowQty(5) < QCutOff THEN         CBundle(5) = LowQty(5)         Wealth(5 + 1) = Wealth(5) - LowQty(5) * Price(5)         Good = 6: GOSUB LastGood      END IF      IF 1 + LowQty(5) - Qty!(5) < QCutOff THEN         Wealth(6) = Wealth(5) - (LowQty(5) + 1) * Price(5)         IF Wealth(6) >= Price(6) THEN CBundle(5) = LowQty(5) + 1: Good = Good + 1: GOSUB Good2      END IF   END IFELSE   GOSUB LastGoodEND IFRETURN'LastGood:   Qty!(Good) = Wealth(Good) / ((NGoods + 1 - Good) * Price(Good))   LowQty(Good) = FIX(Qty!(Good))   CBundle(Good) = LowQty(Good):   TestBundle(Trial, 0) = Wealth(Good) - LowQty(Good) * Price(Good)'Wealth residue   FOR ggood = 1 TO NGoods:      TestBundle(Trial, ggood) = CBundle(ggood):   NEXT ggood   Trial = Trial + 1RETURN'TestBundles:   FOR Trial = 0 TO LastTrial      IF TuneFlag THEN         DO            GOSUB FineTuning         LOOP UNTIL BestGood = 0      END IF      Utility = 1      FOR ggood = 1 TO NGoods         Utility = Utility * TestBundle(Trial, ggood)      NEXT ggood      IF Utility > BestUtility THEN         BestUtility = Utility         FOR ggood = 1 TO NGoods            BestBundle(ggood) = TestBundle(Trial, ggood)         NEXT ggood      END IF   NEXT TrialRETURN'FineTuning:   BestUtilRatio! = 1: BestGood = 0   FOR ggood = 1 TO (NGoods - 1)      IF (DelPrice(ggood) <= TestBundle(Trial, 0)) AND (TestBundle(Trial, ggood + 1) > 1) THEN         UtilRatio! = (TestBundle(Trial, ggood) + 1) * (TestBundle(Trial, ggood + 1) - 1) / (TestBundle(Trial, ggood) * TestBundle(Trial, ggood + 1))         IF UtilRatio! > BestUtilRatio! THEN            BestUtilRatio! = UtilRatio!            BestGood = ggood         END IF      END IF   NEXT ggood   IF BestGood > 0 THEN     TestBundle(Trial, BestGood) = TestBundle(Trial, BestGood) + 1     Wealth(BestGood + 1) = Wealth(BestGood + 1) - Price(BestGood)     TestBundle(Trial, BestGood + 1) = TestBundle(Trial, BestGood + 1) - 1     TestBundle(Trial, 0) = TestBundle(Trial, 0) - DelPrice(BestGood)   END IFRETURN'Sortit:   Y = NGoodsZ1: Y = Y / 2   IF Y = 0 THEN RETURN: 'Sort complete   Z99 = NGoods - Y   FOR K9 = 1 TO Z99   I = K9X2: E2 = I + YIF Price(I) >= Price(E2) THEN      GOTO X3   ELSE      SWAP Price(I), Price(E2): SWAP order(I), order(E2)   END IF   I = I - Y   IF I > 0 THEN GOTO X2X3: NEXT K9GOTO Z1RETURN