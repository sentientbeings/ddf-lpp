'==============================================================================='=                     Copyright 1992 Stazª Software, Inc.                     ='=                             All rights reserved                             ='=                            "Project.INCL" from PG:PRO                       ='===============================================================================INCLUDE FILE 1COMPILE 0,140                                     '4(DBug) +8(STR#) +128(­Case)'GLOBALS "PG PRO.GLBL"                             'include standard global file'{PG7}                                            'PG PRO markerGLOBALS "Supermarket.GLBL"END GLOBALS'{PG8}                                            'PG PRO markerGOTO"End Of Project Include"INCLUDE "@Header.INCL"'==============================================================================='                     Put your application's LOCAL FNs here'==============================================================================='***To Do List***'Search Strategies--nearest, line of sight, all, endogenous'Movable, creatable wells'Controllable item limits on wells, checkouts'Line length by item or by cart'(Angle carts?)'Variable checker speed'(Animate checkouts?)'Finish notes window, add other help windows'Timeout when menus, etc.'*****************LOCAL FN displayPICT (PICTid%,xPict%,yPict%)  pict&=FN GETRESOURCE(_"PICT",PICTid%)           'get pict handle  LONG IF pict& <> 0                              'valid handle?    PICTURE (xPict%,yPict%), pict&                'put pict to window    CALL RELEASERESOURCE(pict&)                   'remove rsrc PICTs this way ONLY!  END IFEND FN'LOCAL FN ShoppersSort                             'Shell sort modified from ZBasic 5 examples--decreasing  DIM ST(30,1)  SP=0: ST(0,0)=0:ST(0,1)=0  ST(0,1)=gNbrShoppers-1  DO    L=ST(SP,0): R=ST(SP,1):SP=SP-1    DO      LI=L:RI=R:SA=gShopper.Sloc.h((L+R)/2)      DO        WHILE gShopper.Sloc.h(LI)>SA          LI=LI+1        WEND        WHILE gShopper.Sloc.h(RI)<SA          RI=RI-1        WEND        LONG IF LI<=RI          'SWAP gShopper(LI), gShopper(RI)          gGhostShopper=gShopper(LI):gShopper(LI)=gShopper(RI)          gShopper(RI)=gGhostShopper              'Swapping Shoppers LI,RI          LI=LI+1:RI=RI-1        END IF      UNTIL LI>RI      LONG IF (R-LI)> (RI-L)        LONG IF L<RI          SP=SP+1: ST(SP,0)=L: ST(SP,1)=RI        END IF        L=LI      XELSE        LONG IF LI<R          SP=SP+1: ST(SP,0)=LI:ST(SP,1)=R        END IF        R=RI      END IF    UNTIL R<=L  UNTIL SP=-1END FN'LOCAL FN NewShopper(well%)  LONG IF gWell.WMaxItems(well%)>0    y1= gWell.WLoc.v%(well%)    gShopper.SLoc.v%(gNbrShoppers) = y1    x1=gWell.WLoc.h%(well%)+gShopperWidth    gShopper.SLoc.h%(gNbrShoppers) = x1    gShopper.SItems%(gNbrShoppers) = RND(gWell.WMaxItems(well%))    gShopper.SOldItems%(gNbrShoppers) = gShopper.SItems%(gNbrShoppers)    gShopper.SStatus%(gNbrShoppers) = _Searching    gShopper.STargetLine%(gNbrShoppers)=1+(gShopper.SLoc.v%(gNbrShoppers)-_COffset)/_CheckoutSeparation    WHILE gShopper.SItems%(gNbrShoppers)>gCheckout.CMaxItems%(gShopper.STargetLine%(gNbrShoppers)) AND gShopper.STargetLine%(gNbrShoppers)<=gNbrCheckouts      INC(gShopper.STargetLine%(gNbrShoppers))    WEND                                          'Check higher lines until one permits the cart    WHILE gShopper.SItems%(gNbrShoppers)>gCheckout.CMaxItems%(gShopper.STargetLine%(gNbrShoppers)) AND gShopper.STargetLine%(gNbrShoppers)>0      DEC(gShopper.STargetLine%(gNbrShoppers))    WEND                                          'If no higher lines permit, check lower lines    gShopper.Informed%(gNbrShoppers) = _False    TEXT _monaco,9,,_srcXor    PEN ,,,_patXor    PRINT%(x1+_Textdx,y1+_Textdy) gShopper.SItems%(gNbrShoppers);    'PRINT%(x1+_Textdx,y1+_Textdy) gShopper.SStatus%(gNbrShoppers);    PUT (x1,y1), gSImage%(0)    INC(gNbrShoppers)                             ' = gNbrShoppers+1  END IFEND FN'LOCAL FN Initialize  DIM rect;8  PEN ,,,_patXor  TEXT _monaco,9  gSStrategy =_NearestLines  gSCtStrategy=_CountCarts  gWellsVisible=_True  gCNewLimitFlag=_False  gWNewLimitFlag=_False  gNbrShoppers=0  gNbrCheckouts=6  gNbrWells=5  gNbrAisles=6  gCheckouth%=400  gCartSpeed%=1  gWellSpeed=200  gCkOutSpeed=2  gMinInterval=10  gSCycle=0  y=_TopCheckout                                  '1  FOR Checkout=1 TO gNbrCheckouts    gCheckout.Cv%(Checkout)=y                     'define checkout locations    y=y+_CheckoutSeparation    gCheckout.CMaxItems%(Checkout)=100    gCheckout.CLineLgth%(Checkout)=0              'Line starts with no carts    gCheckout.CLineItemLgth%(Checkout) = 0        'Line starts with no items    gCheckout.CLineEndh%(Checkout)=gCheckouth%    'Line starts with zero length  NEXT Checkout  gCheckout.CMaxItems%(6)=20  FOR Checkout=1 TO gNbrCheckouts    CALL SETRECT(rect,gCheckouth%+50,gCheckout.Cv%(Checkout)+1,gCheckouth%+90,gCheckout.Cv%(Checkout)+29)'set initial rectangle    'DEF SHADOWBOX(rect)                           'draw shadowbox first    tmp$="Items"    CALL SETRECT(rect,gCheckouth%+52,gCheckout.Cv%(Checkout)+15,gCheckouth%+88,gCheckout.Cv%(Checkout)+27)'set initial rectangle    LONG IF gCheckout.CMaxItems%(Checkout)<100      'DEF CBOX(rect,tmp$)                         'center justify      Length=LEN(STR$(gCheckout.CMaxItems%(Checkout)))'Getting rid of that @%#$ leading blank      tmp$=RIGHT$(STR$(gCheckout.CMaxItems%(Checkout)),Length-1)    XELSE      tmp$=""    END IF    TEXT    CALL SETRECT(rect,gCheckouth%+48,gCheckout.Cv%(Checkout)+3,gCheckouth%+86,gCheckout.Cv%(Checkout)+14)'set initial rectangle    EDIT FIELD#Checkout,tmp$,@rect,_noframed,_centerJust+4'+4 Makes it a numeric field  NEXT Checkout  EDIT FIELD #0  '  pict&=FN GETRESOURCE(_"PICT",_WPICTid)          'get pict handle to Well  LONG IF pict& <> 0                              'valid handle?    BLOCKMOVE [pict&]+2,@rect,8                   'Find pict dimensions    PICTURE (1,1), pict&    CALL RELEASERESOURCE(pict&)                   'remove rsrc PICTs this way ONLY!  END IF  'GET (1,1)-(1+rect.right-rect.left,1+rect.bottom-rect.top), gWImage%(0)  'PUT (1,1), gSImage%(0),XOR  'gWellHeight=rect.bottom-rect.top  'gWellWidth=1+rect.right-rect.left               'Horizontal dimension of shopper icon  y=_CheckoutSeparation+_TopCheckout-4  FOR Well=1 TO gNbrWells    gWell.WLoc.h%(Well)=5                         'define well horizontal    gWell.WLoc.v%(Well)=y                         'define well height    y=y+_CheckoutSeparation    gWell.WMaxItems(Well)=RND(99)    'Commented out chunk goes back if we use edit fields for well maximum items    'Length=LEN(STR$(gWell.WMaxItems(Well)))       'Getting rid of that @%#$ leading blank    'tmp$=RIGHT$(STR$(gWell.WMaxItems(Well)),Length-1)    'CALL SETRECT(rect,gWell.WLoc.h%(well)+_Textdx-8,gWell.WLoc.v%(well)+_Textdy-8,gWell.WLoc.h%(well)+_Textdx+7,gWell.WLoc.v%(well)+_Textdy+1)'set initial rectangle    'CALL SETRECT(rect,gWell.WLoc.h%(well)+5,gWell.WLoc.v%(well)+5,gWell.WLoc.h%(well)+18,gWell.WLoc.v%(well)+13)'set initial rectangle    'TEXT _monaco,8,,_srcXor    'EDIT FIELD#Well+100,tmp$,@rect,_noframed,_centerJust+4'+4 Makes it a numeric field    'TEXT _monaco,9,,_srcXor  NEXT Well  '  pict&=FN GETRESOURCE(_"PICT",_SPICTid)          'get pict handle to shopper  LONG IF pict& <> 0                              'valid handle?    BLOCKMOVE [pict&]+2,@rect,8                   'Find pict dimensions    PICTURE (1,1), pict&    CALL RELEASERESOURCE(pict&)                   'remove rsrc PICTs this way ONLY!  END IF  GET (1,1)-(1+rect.right-rect.left,1+rect.bottom-rect.top), gSImage%(0)  PUT (1,1), gSImage%(0),XOR  gShopperHeight=rect.bottom-rect.top  gShopperWidth=1+rect.right-rect.left            'Horizontal dimension of shopper icon  MENU _SearchStrategyMenu, gSStrategy, _checked  MENU _ShoppersCountMenu, gSCtStrategy, _checked  gNewTime&=FN TICKCOUNT  gMoving%=_TrueEND FN'LOCAL FN RefreshMain  DIM rect;8  CLS  TEXT _monaco,9,,_srcXor  PEN ,,,_patXor  pict&=FN GETRESOURCE(_"PICT",_CPICTid)          'get pict handle to Checkout  LONG IF pict& <> 0                              'valid handle?    FOR Checkout=1 TO gNbrCheckouts      PICTURE (gCheckouth%,gCheckout.Cv%(Checkout)), pict&'put pict to window      CALL SETRECT(rect,gCheckouth%+46,gCheckout.Cv%(Checkout)+1,gCheckouth%+90,gCheckout.Cv%(Checkout)+29)'set initial rectangle      DEF SHADOWBOX(rect)                         'draw shadowbox first      LONG IF gCheckout.CMaxItems%(Checkout)<100        CALL SETRECT(rect,gCheckouth%+52,gCheckout.Cv%(Checkout)+15,gCheckouth%+86,gCheckout.Cv%(Checkout)+27)'set initial rectangle        tmp$ = "Items"                            'STR$(gCheckout.CMaxItems%(Checkout))+" Items"        DEF CBOX(rect,tmp$)                       'center justify      END IF      LONG IF gCheckout.CMaxItems%(Checkout)=0    'Lane is shut        PLOT gCheckouth%+gShopperWidth+1,gCheckout.Cv%(Checkout)+_COffset TO gCheckouth%+gShopperWidth+1,gCheckout.Cv%(Checkout)+_COffset+gShopperHeight       END IF    NEXT Checkout    CALL RELEASERESOURCE(pict&)  END IF  '  LONG IF gNbrShoppers>0                          'Are there any shoppers to draw?    FOR Shp=0 TO gNbrShoppers-1      PUT (gShopper.SLoc.h%(Shp),gShopper.SLoc.v%(Shp)), gSImage%(0)      PRINT%(gShopper.SLoc.h%(Shp)+_Textdx,gShopper.SLoc.v%(Shp)+_Textdy) gShopper.SItems%(Shp);      'PRINT%(gShopper.SLoc.h%(Shp)+_Textdx,gShopper.SLoc.v%(Shp)+_Textdy) gShopper.SStatus% (Shp);    NEXT Shp  END IF  '  pict&=FN GETRESOURCE(_"PICT",_WPICTid)          'get pict handle to Well  LONG IF pict& <> 0                              'valid handle?    LONG IF gNbrWells>=1 AND gWellsVisible      FOR well=1 TO gNbrWells        PICTURE (gWell.WLoc.h%(well),gWell.WLoc.v%(well)), pict&'put pict to window        'Remove next line if we use edit fields instead        PRINT%(gWell.WLoc.h%(well)+_Textdx-5,gWell.WLoc.v%(well)+_Textdy+2) gWell.WMaxItems(Well)      NEXT well    END IF    CALL RELEASERESOURCE(pict&)  END IF  '  PEN ,,,,5  y=20+_TopCheckout  FOR Aisle=1 TO gNbrAisles    BOX FILL 0,y TO 30, y+8                       'draw aisles    y=y+_CheckoutSeparation  NEXT Aisle  PEN ,,,,0  'BOX FILL 0,y TO 500, y-6                        'draw bottom wall  BOX FILL 0,y-8 TO 500, y-14                     'draw bottom wall  BOX FILL 0,1 TO 500, 7                          'draw top wallEND FN'LOCAL FN ShoppersSearch  LONG IF gNbrShoppers>0                          'Are there any shoppers to move?    'Decide which line the shopper is going to    'FOR Shp=0 TO gNbrShoppers-1    FOR Shp=gSCycle TO gNbrShoppers-1 STEP _SCycle      LONG IF gShopper.SStatus%(Shp)=_Searching        TargetMiss=(gShopper.SLoc.v%(Shp)-_COffset) MOD _CheckoutSeparation        ShopperLine%=1+(gShopper.SLoc.v%(Shp)-_COffset)/_CheckoutSeparation'first line to shopper's left        IF TargetMiss=0 THEN TargetLine%=ShopperLine%-1 ELSE TargetLine%=ShopperLine%'If cart is in line with checkout        IF TargetLine%<1 THEN TargetLine%=1        BestLgth%=5000        SELECT gSStrategy          CASE _NearestLines            TLine2=TargetLine            MaxLine=ShopperLine%+1            IF MaxLine>gNbrCheckouts THEN MaxLine=gNbrCheckouts          CASE _LineOfSight, _AllLines            TLine2=1            MaxLine=gNbrCheckouts          CASE _EndogSearch        END SELECT        WHILE TLine2<=MaxLine AND TLine2<=gNbrCheckouts          LONG IF gShopper.SItems%(Shp)<=gCheckout.CMaxItems%(TLine2)            LONG IF gSStrategy=_LineOfSight              'calculate if end of line is in sight            END IF            LONG IF gSCtStrategy=_CountCarts              CrtLgth=gCheckout.CLineLgth%(TLine2)            XELSE              CrtLgth=gCheckout.CLineItemLgth%(TLine2)            END IF            LONG IF CrtLgth<BestLgth%                           BestLgth%=CrtLgth              TargetLine%=TLine2                  'Make the shorter line the target              HDistance=ABS((gShopper.SLoc.v%(Shp)-_COffset)-gCheckout.Cv%(TLine2))            XELSE              LONG IF CrtLgth=BestLgth%                           LONG IF ABS((gShopper.SLoc.v%(Shp)-_COffset)-gCheckout.Cv%(TLine2))<HDistance                  TargetLine%=TLine2                  HDistance=ABS((gShopper.SLoc.v%(Shp)-_COffset)-gCheckout.Cv%(TLine2))                END IF              END IF            END IF          END IF          INC (TLine2)        WEND        LONG IF BestLgth%<gCheckout.CLineLgth%(gShopper.STargetLine(Shp))          gShopper.STargetLine(Shp)=TargetLine%        XELSE          LONG IF gShopper.SItems%(Shp)>gCheckout.CMaxItems%(gShopper.STargetLine(Shp))            gShopper.STargetLine(Shp)=(gShopper.STargetLine(Shp)+1) MOD gNbrCheckouts          END IF        END IF      END IF    NEXT Shp    FOR Checkout=1 TO gNbrCheckouts      gCheckout.CTmpLineItemLgth%(Checkout)=gCheckout.CLineItemLgth%(Checkout)'restore lengths    NEXT Checkout    FOR Shp=gNbrShoppers-1 TO 0 STEP -1      LONG IF gShopper.SStatus%(Shp)=_InLine      'Checks the adjacent lines to see if worth shifting        TargetLine%=gShopper.STargetLine(Shp)        LONG IF gSCtStrategy=_CountCarts          Length=-gShopper.SLoc.h%(Shp)           'length in pixels        XELSE          gCheckout.CTmpLineItemLgth%(TargetLine%)=gCheckout.CTmpLineItemLgth%(TargetLine%)-gShopper.SItems%(Shp)          Length=gCheckout.CTmpLineItemLgth%(TargetLine%)'Length in Items        END IF        LONG IF TargetLine%>1          LONG IF gSCtStrategy=_CountCarts            crtLength%=_LineDistanceInCarts-gCheckout.CLineEndh%(TargetLine-1)          XELSE            crtLength%=gCheckout.CLineItemLgth%(TargetLine-1)+_LineDistanceInItems'Oops--sign flip!!!          END IF          LONG IF Length>crtLength% AND gShopper.SItems%(Shp)<=gCheckout.CMaxItems%(TargetLine-1)            gShopper.STargetLine(Shp)=TargetLine-1            Length=crtLength%          END IF        END IF        LONG IF TargetLine%<gNbrCheckouts          LONG IF gSCtStrategy=_CountCarts            crtLength%=_LineDistanceInCarts-gCheckout.CLineEndh%(TargetLine+1)          XELSE            crtLength%=gCheckout.CLineItemLgth%(TargetLine+1)+_LineDistanceInItems          END IF          LONG IF Length>crtLength% AND gShopper.SItems%(Shp)<=gCheckout.CMaxItems%(TargetLine+1)            gShopper.STargetLine(Shp)=TargetLine+1            Length=crtLength%          END IF        END IF        LONG IF TargetLine%<>gShopper.STargetLine(Shp)'If cart has switched targets          gShopper.SStatus%(Shp)=_Searching       'Change status back to searching          DEC(gCheckout.CLineLgth%(TargetLine%))  'old Line is shorter by 1          gCheckout.CLineEndh%(TargetLine%)=gCheckout.CLineEndh%(TargetLine%)+gShopperWidth          gCheckout.CLineItemLgth%(TargetLine%)=gCheckout.CLineItemLgth%(TargetLine%)-gShopper.SItems%(Shp)        END IF      END IF    NEXT Shp    INC(gSCycle)    IF gSCycle>=_SCycle THEN gSCycle=0  END IF  gNewTime&=FN TICKCOUNTEND FN'LOCAL FN CheckInterval  WHILE FN TICKCOUNT<(gNewTime&+gMinInterval)  WEND  gInterval&=FN TICKCOUNT-gNewTime&  gNewTime&=FN TICKCOUNTEND FN '    'LOCAL FN ShowLinelength  FOR Checkout=1 TO gNbrCheckouts    PLOT gCheckout.ColdLineEndh%(Checkout),gCheckout.Cv%(Checkout)+20 TO gCheckout.ColdLineEndh%(Checkout),gCheckout.Cv%(Checkout)+40    PLOT gCheckout.CLineEndh%(Checkout),gCheckout.Cv%(Checkout)+20 TO gCheckout.CLineEndh%(Checkout),gCheckout.Cv%(Checkout)+40    gCheckout.ColdLineEndh%(Checkout)=gCheckout.CLineEndh%(Checkout)  NEXT CheckoutEND FN'LOCAL FN ShowLineItemlength  FOR Checkout=1 TO gNbrCheckouts    TEXT ,,,_patCopy    PRINT%(gCheckouth%+30,gCheckout.Cv%(Checkout)+20) gCheckout.CLineItemLgth%(Checkout);    TEXT ,,,_patXor  NEXT CheckoutEND FN'LOCAL FN ShoppersCheckOut  LONG IF gNbrShoppers>0                          'Are there any shoppers to move?    PEN ,,,_patXor    TEXT _monaco,9,,_srcXor    FOR Shp=0 TO gNbrShoppers-1                   'Who is checking out?      LONG IF (gShopper.SStatus%(Shp)=_CheckingOut)        gShopper.SOldItems%(Shp)=gShopper.SItems%(Shp)        ItemsCkdOut=gInterval&>>gCkOutSpeed        gShopper.SItems%(Shp)=gShopper.SItems%(Shp)-ItemsCkdOut        LONG IF gShopper.SItems%(Shp)<=0          'Shopper is finished, exits          DEC(gCheckout.CLineLgth%(gShopper.STargetLine(Shp)))'Line is shorter by 1          gCheckout.CLineEndh%(gShopper.STargetLine(Shp))=gCheckout.CLineEndh%(gShopper.STargetLine(Shp))+gShopperWidth          gCheckout.CLineItemLgth%(gShopper.STargetLine(Shp))=gCheckout.CLineItemLgth%(gShopper.STargetLine(Shp))-gShopper.SOldItems%(Shp)          PUT (gShopper.SLoc.h%(Shp),gShopper.SLoc.v%(Shp)), gSImage%(0),XOR          PRINT% (gShopper.SLoc.h%(Shp)+_Textdx,gShopper.SLoc.v%(Shp)+_Textdy)gShopper.SOldItems%(Shp);          'PRINT% (gShopper.SOldLoc.h%(Shp)+_Textdx,gShopper.SOldLoc.v%(Shp)+_Textdy)gShopper.SStatus%(Shp);          LONG IF shp<=(gNbrShoppers-2)            FOR Shp2=Shp TO gNbrShoppers-2              gShopper(Shp2)=gShopper(Shp2+1)            NEXT Shp2          END IF          gNbrShoppers=gNbrShoppers-1          shp=shp-1        XELSE          gCheckout.CLineItemLgth%(gShopper.STargetLine(Shp))=gCheckout.CLineItemLgth%(gShopper.STargetLine(Shp))-ItemsCkdOut        END IF      END IF    NEXT Shp  END IFEND FN'LOCAL FN ShoppersMove  LONG IF gNbrShoppers>0                          'Are there any shoppers to move?    deltas%=(gInterval&>>gCartSpeed%)    deltav%=0    FOR Shp=0 TO gNbrShoppers-1      VDeviation=gCheckout.Cv%(gShopper.STargetLine(Shp))-gShopper.SLoc.v%(Shp)+_COffset      LONG IF gCheckout.CLineLgth%(gShopper.STargetLine(Shp))=0'Aim at checkout entrance        HDeviation=gCheckout.CLineEndh%(gShopper.STargetLine(Shp))-(gShopper.SLoc.h%(Shp)+gShopperWidth)      XELSE                                       'Aim at back of last cart in line        HDeviation=gCheckout.CLineEndh%(gShopper.STargetLine(Shp))-gShopper.SLoc.h%(Shp)'+gShopperWidth      END IF      SDeviation=SQR(VDeviation^2+HDeviation^2)      SELECT gShopper.SStatus%(Shp)        CASE _Shopping                            'Not yet implemented        CASE _Searching, _InLine          LONG IF ABS(VDeviation)<3            deltah%=deltas%            deltav%=VDeviation+2-RND(3)          XELSE            deltah%=(deltas%*HDeviation)/SDeviation            deltav%=(deltas%*VDeviation)/SDeviation          END IF          'CASE _InLine          'LONG IF ABS(VDeviation)<3          'deltah%=deltas%          'deltav%=VDeviation+2-RND(3)          'XELSE          'deltah%=(deltas%*HDeviation)/SDeviation          'deltav%=(deltas%*VDeviation)/SDeviation        CASE _CheckingOut                         'The shopper is standing at the checkout          deltah%=0          deltav%=0      END SELECT      gShopper.SOldLoc.h%(Shp)=gShopper.SLoc.h%(Shp)      gShopper.SLoc.h%(Shp)=gShopper.SLoc.h%(Shp)+deltah%      gShopper.SOldLoc.v%(Shp)=gShopper.SLoc.v%(Shp)      gShopper.SLoc.v%(Shp)=gShopper.SLoc.v%(Shp)+deltav%      'gShopper.SOldStatus%(Shp)=gShopper.SStatus%(Shp)'!!Diagnostic!!      '      'check for collision with shoppers ahead      LONG IF Shp>0        Collision=_False        EndCondition=_False        Shp2=Shp-1        WHILE Shp2>=0 AND (Collision=_False) AND EndCondition=_False          LONG IF (gShopper.SLoc.h%(Shp2)-gShopper.SLoc.h%(Shp))<gShopperWidth            LONG IF ABS (gShopper.SLoc.v%(Shp2)-gShopper.SLoc.v%(Shp))<gShopperHeight              Collision=_True            XELSE              DEC (Shp2)            END IF          XELSE            EndCondition=_True          END IF        WEND        LONG IF Collision          gShopper.SLoc.h%(Shp)=gShopper.SLoc.h%(Shp2)-gShopperWidth          LONG IF (gShopper.SStatus%(Shp2)=_CheckingOut) OR (gShopper.SStatus%(Shp2)=_InLine)            LONG IF gShopper.SStatus%(Shp)<>_InLine              gShopper.SStatus%(Shp)=_InLine              INC(gCheckout.CLineLgth%(gShopper.STargetLine(Shp)))'Line is longer by 1              gCheckout.CLineItemLgth%(gShopper.STargetLine(Shp))=gCheckout.CLineItemLgth%(gShopper.STargetLine(Shp))+gShopper.SItems%(Shp)              gCheckout.CLineEndh%(gShopper.STargetLine(Shp))=gCheckout.CLineEndh%(gShopper.STargetLine(Shp))-gShopperWidth            END IF          END IF        END IF       END IF      'next check  for collision with checkout counter      LONG IF gShopper.SLoc.h%(Shp)>gCheckouth%-gShopperWidth        AisleMiss=gCheckout.Cv%(gShopper.STargetLine(Shp))-gShopper.SLoc.v%(Shp)+_COffset        IF ABS(AisleMiss)>1 THEN gShopper.SLoc.h%(Shp)=gCheckouth%-gShopperWidth      END IF      'next check  for collision with store walls      IF gShopper.SLoc.v%(Shp)<2 THEN gShopper.SLoc.v%(Shp)=2:gShopper.STargetLine(Shp)=1      IF gShopper.SLoc.v%(Shp)>320 THEN gShopper.SLoc.v%=320      'Has it reached the checkout?      LONG IF gShopper.SLoc.h%(Shp)>gCheckouth%   'Has it reached the checkout?        LONG IF (gShopper.SStatus%(Shp)<>_InLine) AND (gShopper.SStatus%(Shp)<>_CheckingOut)          INC(gCheckout.CLineLgth%(gShopper.STargetLine(Shp)))'Line is longer by 1          gCheckout.CLineItemLgth%(gShopper.STargetLine(Shp))=gCheckout.CLineItemLgth%(gShopper.STargetLine(Shp))+gShopper.SItems%(Shp)          gCheckout.CLineEndh%(gShopper.STargetLine(Shp))=gCheckout.CLineEndh%(gShopper.STargetLine(Shp))-gShopperWidth        END IF        gShopper.SLoc.h%(Shp)=gCheckouth%        gShopper.SStatus%(Shp)=_CheckingOut      END IF     NEXT Shp  END IFEND FN'LOCAL FN ShoppersDraw  LONG IF gNbrShoppers>0                          'Are there any shoppers to draw?    FOR Shp=0 TO gNbrShoppers-1      PUT (gShopper.SOldLoc.h%(Shp),gShopper.SOldLoc.v%(Shp)), gSImage%(0),XOR      PUT (gShopper.SLoc.h%(Shp),gShopper.SLoc.v%(Shp)), gSImage%(0),XOR      PRINT% (gShopper.SOldLoc.h%(Shp)+_Textdx,gShopper.SOldLoc.v%(Shp)+_Textdy) gShopper.SOldItems%(Shp);      PRINT% (gShopper.SLoc.h%(Shp)+_Textdx,gShopper.SLoc.v%(Shp)+_Textdy) gShopper.SItems%(Shp);      'PRINT% (gShopper.SOldLoc.h%(Shp)+_Textdx,gShopper.SOldLoc.v%(Shp)+_Textdy) Shp;      'PRINT% (gShopper.SLoc.h%(Shp)+_Textdx,gShopper.SLoc.v%(Shp)+_Textdy) Shp;      'PRINT% (gShopper.SOldLoc.h%(Shp)+_Textdx,gShopper.SOldLoc.v%(Shp)+_Textdy) gShopper.SOldStatus%(Shp);      'PRINT% (gShopper.SLoc.h%(Shp)+_Textdx,gShopper.SLoc.v%(Shp)+_Textdy) gShopper.SStatus%(Shp);    NEXT Shp  END IF  'Moves shopper distance proportional to gInterval*gCartSpeed%  'Unless there is a collision problem.END FN'LOCAL FN TestCBox  DIM Itemrect;8  CALL SETRECT (Itemrect, 50,50,100,90)  PEN ,,,_patXor  TEXT _monaco,9,,_srcXor  Test$="Testing"  'DEF CBOX (Itemrect,Test$)  PRINT% (31,38) "99"END FN'LOCAL FN PollWells  prob%=1+gWellSpeed/gInterval&  RANDOM FN TICKCOUNT  'match=RND(_WellSpeedMin/gInterval&)  LONG IF gNbrWells>=1    FOR Well=1 TO gNbrWells      LONG IF ((RND(prob%)=1) AND (gNbrShoppers<_ShopperMax))         FN NewShopper(Well)      END IF    NEXT Well  END IFEND FN'LOCAL FN CheckVariables  DIM rect;8  LONG IF gCNewLimitFlag    FOR Checkout=1 TO gNbrCheckouts      SELECT LEN(EDIT$(Checkout))        CASE 0          IF gCheckout.CMaxItems%(Checkout)>0 THEN gCheckout.CMaxItems%(Checkout)=100        CASE 1,2          gCheckout.CMaxItems%(Checkout)=VAL(EDIT$(Checkout))        CASE ELSE          LONG IF VAL(EDIT$(Checkout))>99            txt$=STR$(gCheckout.CMaxItems%(Checkout))          XELSE            txt$=STR$(VAL(EDIT$(Checkout)))          END IF          Length=LEN(txt$)                        'Getting rid of that @%#$ leading blank          EDIT$(Checkout)=RIGHT$(STR$(gCheckout.CMaxItems%(Checkout)),Length-1)          EDIT FIELD #0      END SELECT      LONG IF gCheckout.CMaxItems%(Checkout)<100         LONG IF gCheckout.CMaxItems%(Checkout)>0          CALL SETRECT(rect,gCheckouth%+52,gCheckout.Cv%(Checkout)+15,gCheckouth%+86,gCheckout.Cv%(Checkout)+27)'set initial rectangle          tmp$ = "Items"                          'STR$(gCheckout.CMaxItems%(Checkout))+" Items"        XELSE          CALL SETRECT(rect,gCheckouth%+52,gCheckout.Cv%(Checkout)+5,gCheckouth%+86,gCheckout.Cv%(Checkout)+26)'set initial rectangle          tmp$ = "Next Aisle"                     'STR$(gCheckout.CMaxItems%(Checkout))+" Items"          EDIT$(Checkout)=""                              END IF        DEF CBOX(rect,tmp$)                       'center justify      END IF    NEXT Checkout    gCNewLimitFlag=_False    'TEXT _monaco,9,,_srcCopy:PRINT%(20,20) gCheckout.CMaxItems%(6);:TEXT _monaco,9,,_srcXor  END IF  'Remove next chunk if edit fields for wells are ot used  LONG IF gWNewLimitFlag    FOR Well=1 TO gNbrWells      SELECT LEN(EDIT$(Well+100))        CASE 0          IF gWell.WMaxItems(Well)>0 THEN gWell.WMaxItems(Well)=100'Change this?        CASE 1,2          gWell.WMaxItems(Well)=VAL(EDIT$(Well+100))        CASE ELSE          LONG IF VAL(EDIT$(Well+100))>99            txt$=STR$(gWell.WMaxItems(Well))          XELSE            txt$=STR$(VAL(EDIT$(Well+100)))          END IF          Length=LEN(txt$)                        'Getting rid of that @%#$ leading blank          EDIT$(Well+100)=RIGHT$(STR$(gWell.WMaxItems(Well)),Length-1)          EDIT FIELD #0      END SELECT    NEXT Well    gWNewLimitFlag=_False  END IFEND FN"End Of Project Include"